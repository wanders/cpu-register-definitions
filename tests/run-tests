#!/usr/bin/env python3

import os

from re import match
from subprocess import run
from tempfile import NamedTemporaryFile


EXPECTED_VALUES = {
    "rax": 1,
    "rbx": 2,
    "rcx": 3,
    "rdx": 4,
    "rsi": 5,
    "rdi": 6,
    "rbp": 7,
    "r8": 8,
    "r9": 9,
    "r10": 10,
    "r11": 11,
    "r12": 12,
    "r13": 13,
    "r14": 14,
    "r15": 15,
}


def do_compile(extra_args):
    run(["gcc", "-o", "ucontext", "ucontext.c", "-Wall", "-g", "-I.."] + extra_args, check=True)


def run_text():
    do_compile(["-DDUMP_AS_TEXT=1"])
    p = run(["./ucontext"], check=True, capture_output=True)

    res = {}
    for l in p.stdout.decode("ascii").split("\n"):
        if not l:
            continue
        reg, _, val = l.partition(": ")
        res[reg.strip()] = int(val, 16)

    return res


def run_elfcore():
    res = {}

    do_compile(["-DDUMP_AS_ELFCORE=1"])
    with NamedTemporaryFile() as tf:
        run(["./ucontext"], check=True, stdout=tf)
        p = run(["eu-readelf", "-n", tf.name], capture_output=True)
        for l in p.stdout.decode("ascii").split("\n"):
            if m := match(r"\s+(r[0-9a-z]{1,2}):\s+([0-9a-fx]+)\s+(r[0-9a-z]{1,2}):\s+([0-9a-fx]+)", l):
                n1, v1, n2, v2 = m.groups()

                res[n1] = int(v1, 0)
                res[n2] = int(v2, 0)

    return res


def check(actual_regs):
    for exp_reg, exp_val in EXPECTED_VALUES.items():
        assert exp_reg in actual_regs
        assert actual_regs[exp_reg] == exp_val


if __name__ == '__main__':
    os.chdir(os.path.dirname(__file__))
    check(run_text())
    check(run_elfcore())
